#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.3 on Tue Nov 20 21:23:14 2018
#

import wx
import wx.adv
import wx.grid
import psycopg2
import arrow
from  db_operation import *




# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class TreeListForSVCs( wx.TreeCtrl ):
    def __init__(self, parent, ID):
        wx.TreeCtrl.__init__( self, parent, ID )

    def update_list(self, list_svc): pass
    #    self.AppendItems( list_svc )


class DailyReport( wx.Frame ):

    def __init__(self,
                 parent=None,
                 id=wx.ID_ANY,
                 pos=wx.DefaultPosition,
                 style=wx.DEFAULT_FRAME_STYLE):
        wx.Frame.__init__( self, parent=None,
                           id=wx.ID_ANY,
                           pos=wx.DefaultPosition,
                           style=wx.DEFAULT_FRAME_STYLE )
        self.SetSize( (800, 600) )
        self.tl_svc = TreeListForSVCs( self, -1 )
        self.cb_svvd = wx.ComboBox( self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN )
        self.cb_last_loading_port = wx.ComboBox( self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN )
        self.dp_closing_date = wx.adv.DatePickerCtrl( self, wx.ID_ANY )
        self.grd_spaces = wx.grid.Grid( self, wx.ID_ANY, size=(1, 1) )
        self.btn_OK = wx.Button( self, wx.ID_ANY, "OK" )
        self.btn_Quit = wx.Button( self, wx.ID_ANY, "Quit" )
        self.btn_Reload = wx.Button( self, wx.ID_ANY, "Reload" )

        self.today = arrow.now().format( 'YYYY-MM-DD' )
        self.db = slots_db( database='postgres',
                       usr='****',
                       pwd='****' )
        self.__set_properties()
        self.__do_layout()
        self.__load_data()

        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle( "SpaceReport" )
        self.SetBackgroundColour( wx.Colour( 172, 172, 172 ) )

        self.grd_spaces.CreateGrid( 10, 5 )
        self.grd_spaces.SetSelectionMode( wx.grid.Grid.SelectRows )
        self.grd_spaces.SetColLabelValue( 0, "Region" )
        self.grd_spaces.SetColSize( 0, 110 )
        self.grd_spaces.SetColLabelValue( 1, "Local" )
        self.grd_spaces.SetColSize( 1, 110 )
        self.grd_spaces.SetColLabelValue( 2, "Local Alloc" )
        self.grd_spaces.SetColSize( 2, 110 )
        self.grd_spaces.SetColLabelValue( 3, "Trans" )
        self.grd_spaces.SetColSize( 3, 110 )
        self.grd_spaces.SetColLabelValue( 4, "Trans Alloc" )
        self.grd_spaces.SetColSize( 4, 110 )

        # end wxGlade

    def __load_data(self):

        self.tl_svc.update_list( self.db.get_svcs_list( self.today ))

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer( wx.HORIZONTAL )
        sizer_2 = wx.BoxSizer( wx.VERTICAL )
        sizer_3 = wx.BoxSizer( wx.HORIZONTAL )
        sizer_4 = wx.BoxSizer( wx.HORIZONTAL )
        sizer_6 = wx.BoxSizer( wx.HORIZONTAL )
        sizer_9 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, "Date" ), wx.HORIZONTAL )
        sizer_8 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, "Last Loading Port" ), wx.HORIZONTAL )
        sizer_7 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, "SVVD" ), wx.HORIZONTAL )
        sizer_5 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, "List of Services" ), wx.HORIZONTAL )
        sizer_5.Add( self.tl_svc, 2, wx.ALL | wx.EXPAND, 0 )
        sizer_1.Add( sizer_5, 1, wx.EXPAND, 0 )
        sizer_7.Add( self.cb_svvd, 1, wx.ALL | wx.EXPAND, 0 )
        sizer_6.Add( sizer_7, 1, wx.EXPAND, 0 )
        sizer_8.Add( self.cb_last_loading_port, 1, wx.ALL | wx.EXPAND, 0 )
        sizer_6.Add( sizer_8, 1, wx.EXPAND, 0 )
        sizer_9.Add( self.dp_closing_date, 1, wx.ALL | wx.EXPAND, 0 )
        sizer_6.Add( sizer_9, 1, wx.EXPAND, 0 )
        sizer_2.Add( sizer_6, 1, wx.EXPAND, 0 )
        sizer_4.Add( self.grd_spaces, 1, wx.EXPAND, 0 )
        sizer_2.Add( sizer_4, 8, wx.EXPAND, 0 )
        sizer_3.Add( (150, 10), 0, 0, 0 )
        sizer_3.Add( self.btn_OK, 0, wx.ALL, 20 )
        sizer_3.Add( self.btn_Reload, 0, wx.ALL, 20 )
        sizer_3.Add( self.btn_Quit, 0, wx.ALL, 20 )
        sizer_3.Add( (150, 10), 0, 0, 0 )
        sizer_2.Add( sizer_3, 1, wx.EXPAND, 0 )
        sizer_1.Add( sizer_2, 8, wx.ALL | wx.EXPAND, 0 )
        # grid_col_width = sizer_4.GetSize()[1] / 5

        self.SetSizer( sizer_1 )
        self.Layout()
        self.Centre()
        # end wxGlade

    # end of class MyFrame


class SpaceReport( wx.App ):
    def OnInit(self):
        self.frame = DailyReport( None, wx.ID_ANY, "" )
        self.SetTopWindow( self.frame )
        self.frame.Show()
        return True


# end of class SpaceReport

if __name__ == "__main__":
    SpaceManagement = SpaceReport( 0 )
    SpaceManagement.MainLoop()
